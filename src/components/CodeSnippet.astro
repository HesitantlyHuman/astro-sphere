---
import { undefined } from "astro:schema";

// TODO: Fix the fact that the code we are provided by shiki is missing all
// the necessary whitespace formatting which it is displayed with.

const { $id } = Astro.locals;

const meta: Record<string, string> = {};
const {
  "data-meta": meta_string,
  "data-code": code_encoded,
  ...props
} = Astro.props;

if (meta_string) {
  const regex = /(\w+)=("[^"]*"|\S+)/g;
  let match;
  while ((match = regex.exec(meta_string)) !== null) {
    const key = match[1];
    let value = match[2];

    // Remove surrounding quotes if present
    if (value.startsWith('"') && value.endsWith('"')) {
      value = value.slice(1, -1);
    }

    meta[key] = value;
  }
}

const file_name = meta.file;
const caption = meta.caption ? meta.caption : "";
const link = meta.link;
const lines_start = meta.lines_start;

console.log(caption);
console.log(lines_start);

const copy_button_id = $id("copy-button");

// Somewhere along the line, the properties are getting encoded in a way which
// does not preserve whitespace. See astro.config.mjs
const code_text = JSON.parse(code_encoded);
---

<figure
  class="m-0 border rounded-md border-black/15 dark:border-neutral-700 overflow-hidden bg-neutral-50 dark:bg-neutral-950"
>
  <figcaption
    class="flex text-sm min-h-10 justify-between items-center p-0 m-0 border-b border-black/15 dark:border-neutral-700 leading-normal bg-neutral-100 dark:bg-neutral-800"
  >
    <div>
      {
        caption && link && (
          <a
            href={link}
            class="no-underline text-black/60 dark:text-white/60 hover:text-black/80 hover:dark:text-white/80 flex items-center p-2 px-4 gap-2 snippet-link fill-black/60 dark:fill-white/60 hover:fill-black/80 hover:dark:fill-white/80"
            aria-label="snippet-link"
            target="_blank"
            rel="noopener noreferrer"
          >
            <svg class="size-3.5">
              <use href="/ui.svg#link" />
            </svg>
            <span>{caption}</span>
          </a>
        )
      }
      {
        caption && !link && (
          <p class="p-2 px-4 m-0 text-black/60 dark:text-white/60">{caption}</p>
        )
      }
      {
        !caption && link && (
          <a
            href={link}
            class="no-underline flex p-2 px-4 snippet-link fill-black/60 dark:fill-white/60 hover:fill-black/80 hover:dark:fill-white/80"
            aria-label="snippet-link"
            target="_blank"
            rel="noopener noreferrer"
          >
            <svg class="size-3.5">
              <use href="/ui.svg#link" />
            </svg>
          </a>
        )
      }
    </div>

    <button
      class="copy-button h-full flex items-center justify-center p-2 px-4 fill-black/60 dark:fill-white/60 hover:fill-black/80 hover:dark:fill-white/80"
      id={copy_button_id}
      aria-label="copy"
    >
      <>
        <svg class="copy-svg copy-svg-active size-3.5 aspect-square">
          <use href="/ui.svg#copy-filled"></use>
        </svg>
        <svg class="copy-svg copy-svg-inactive size-3.5 aspect-square">
          <use href="/ui.svg#copy-open"></use>
        </svg>
      </>
    </button>
  </figcaption>
  <pre {...props}><slot /></pre>
</figure>

<style>
  .copy-button {
    pointer-events: auto;
  }

  .copy-button,
  .active .copy-svg-inactive {
    display: none;
  }

  .copy-button,
  .active .copy-svg-active {
    display: block;
  }

  .copy-svg-active {
    display: none;
  }

  .astro-code {
    border-radius: 0;
    background-color: transparent !important;
  }

  .astro-code code {
    /* Define a counter for each <code> inside .astro-code */
    counter-reset: step;
    /* Start from zero, increment the counter */
    counter-increment: step 0;

    font-size: 14px;

    width: fit-content;
    min-width: 100%;
    display: block;
  }

  .astro-code code .line {
    display: inline-block;
    width: 100%;
    padding-right: 2rem;
  }

  .astro-code code .line::before {
    content: counter(step);
    counter-increment: step;
    width: 2rem;
    margin-right: 1.25rem;
    display: inline-block;
    margin-left: auto;
    text-align: right;

    /* Fix element position during horizontal scroll */
    position: sticky;
    left: 0;
    z-index: 1;

    /* Give a bit of space to counter on horizontal scroll */
    padding-right: 0.25rem;

    /* Illustrative purpose, please extract the value from the theme instead */
    background-color: white;
    color: hsla(0, 0%, 0%, 0.5);
  }
</style>

<script define:vars={{ copy_button_id, code_text }}>
  const button = document.getElementById(copy_button_id);

  let is_active = false;

  button.addEventListener("mousedown", () => {
    button.classList.add("active");
    is_active = true;
  });
  button.addEventListener("mouseleave", () => {
    button.classList.remove("active");
    is_active = false;
  });
  button.addEventListener("mouseup", () => {
    if (is_active) {
      navigator.clipboard.writeText(code_text);
    }

    button.classList.remove("active");
    is_active = false;
  });
</script>
